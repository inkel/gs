{"name":"gs","body":"# Make your life easier with gemsets\r\n\r\nWe have all become familiar with the concept of gemsets. They come in different shapes and sizes, and provide isolation for project dependencies. Some of the libraries that implement gemsets are [rip](https://github.com/defunkt/rip), [RVM](https://rvm.beginrescueend.com/gemsets/) and [rbenv-gemset](https://github.com/jamis/rbenv-gemset).\r\n\r\nThis library recreates the absolutely minimal feature set for creating and using gemsets.\r\n\r\n## Introductory screencast\r\n\r\nIf you want to see this workflow in action, [check the introductory video](http://vimeo.com/soveran/gs). The other tool showcased in the screencast is [dep](http://twpil.github.com/dep/), a dependency tracker.\r\n\r\n## Usage\r\n\r\nThis library provides a command line application called `gs`. These are the available options:\r\n\r\n### gs\r\nWhen called with no arguments, it starts a shell session and\r\nconfigures the variables GEM_HOME, GEM_PATH and PATH to point\r\nto the $PWD/.gs directory. In addition, it sets the GEM_SET\r\nvariable with the name of the current gemset (useful for PS1).\r\n\r\n### gs init\r\nCreates the $PWD/.gs directory.\r\n\r\n### gs help\r\nDisplays the documentation.\r\n\r\n## Getting started\r\n\r\nFirst, grab the gem:\r\n\r\n      $ gem install gs\r\n\r\nNext, type `gs init` within your project and then just `gs` to start the subshell. The environment variables used by RubyGems will now point to the `.gs` directory, and every gem you install, every gem you remove, will use that path.\r\n","tagline":"Gemset management","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}